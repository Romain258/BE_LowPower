/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "rtc.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdbool.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef enum
{
	BLUE_MODE_ACTIVATE_SLEEP,
	BLUE_MODE_ACTIVATE_CALIBRATION,
	BLUE_MODE_ACTIVATE_STOP,
}blue_mode_t;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define CK_CONFIG_PLL_80MGHZ 0
#define CK_CONFIG_MSI_24MGHZ 1

#define CALIBRATION_OFF 0
#define CALIBRATION_ON 1

#define SLEEP_OFF 0
#define SLEEP_ON 1

#define NORMAL_MODE 0
#define BLUE_MODE 1
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
int expe=1;
int compteur_systick=0;
int mode=NORMAL_MODE;
blue_mode_t blue_mode_action;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(bool ck_config, uint32_t flash_latency,uint32_t voltage_scaling,bool calibration);
/* USER CODE BEGIN PFP */
void Systick_Init (void);
void LSE_Init(void);
void PLL_Activate(void);
void PLL_Disable(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  //Variables configuration des experiences
  bool ck_config;
  uint32_t flash_latency;
  uint32_t voltage_scaling;
  uint32_t stop_mode;
  bool calibration;
  bool sleep;
  uint32_t stop;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);

  /* System interrupt init*/

  /* USER CODE BEGIN Init */
  //Initialisation LSE et RTC uniquement lors d'un démarrage à froid
  if(LL_RCC_LSE_IsReady() != 1)
     {
   	  LSE_Init();
   	  MX_RTC_Init();
     }

  //Récupération expe dans Bckup domain
   LL_RTC_DisableWriteProtection(RTC);
   expe=LL_RTC_BAK_GetRegister(RTC, 0)+1;
   if (expe==9){expe=0;}
   LL_RTC_BAK_SetRegister(RTC, 0, expe);
   //LL_RTC_EnableWriteProtection(RTC);

  //Définition des paramètres de chaque experience
    switch(expe)
    {
    case 1:
  	  ck_config=CK_CONFIG_PLL_80MGHZ;
  	  flash_latency=LL_FLASH_LATENCY_4;
  	  voltage_scaling=LL_PWR_REGU_VOLTAGE_SCALE1;
  	  calibration=CALIBRATION_OFF;
  	  sleep=SLEEP_OFF;
  	  blue_mode_action=BLUE_MODE_ACTIVATE_SLEEP;
  	  break;
    case 2:
  	  ck_config=CK_CONFIG_MSI_24MGHZ;
  	  flash_latency=LL_FLASH_LATENCY_1;
  	  voltage_scaling=LL_PWR_REGU_VOLTAGE_SCALE1;
  	  calibration=CALIBRATION_OFF;
  	  sleep=SLEEP_OFF;
  	  blue_mode_action=BLUE_MODE_ACTIVATE_CALIBRATION;
  	  break;
    case 3:
    	  ck_config=CK_CONFIG_MSI_24MGHZ;
    	  flash_latency=LL_FLASH_LATENCY_3;
    	  voltage_scaling=LL_PWR_REGU_VOLTAGE_SCALE2;
    	  calibration=CALIBRATION_OFF;
    	  sleep=SLEEP_OFF;
    	  blue_mode_action=BLUE_MODE_ACTIVATE_SLEEP;
    	  break;
    case 4:
       ck_config=CK_CONFIG_MSI_24MGHZ;
       flash_latency=LL_FLASH_LATENCY_3;
       voltage_scaling=LL_PWR_REGU_VOLTAGE_SCALE2;
       calibration=CALIBRATION_OFF;
       sleep=SLEEP_OFF;
       blue_mode_action=BLUE_MODE_ACTIVATE_SLEEP;
       break;
    case 5:
  	  ck_config=CK_CONFIG_MSI_24MGHZ;
  	  flash_latency=LL_FLASH_LATENCY_3;
  	  voltage_scaling=LL_PWR_REGU_VOLTAGE_SCALE2;
  	  calibration=CALIBRATION_ON;
  	  sleep=SLEEP_ON;
  	  stop=LL_PWR_MODE_STOP0;
  	  blue_mode_action=BLUE_MODE_ACTIVATE_STOP;
  	  break;
    case 6:
    	  ck_config=CK_CONFIG_MSI_24MGHZ;
    	  flash_latency=LL_FLASH_LATENCY_3;
    	  voltage_scaling=LL_PWR_REGU_VOLTAGE_SCALE2;
    	  calibration=CALIBRATION_ON;
    	  sleep=SLEEP_ON;
    	  stop=LL_PWR_MODE_STOP1;
    	  blue_mode_action=BLUE_MODE_ACTIVATE_STOP;
    	  break;
    case 7:
    	  ck_config=CK_CONFIG_MSI_24MGHZ;
    	  flash_latency=LL_FLASH_LATENCY_3;
    	  voltage_scaling=LL_PWR_REGU_VOLTAGE_SCALE2;
    	  calibration=CALIBRATION_ON;
    	  sleep=SLEEP_ON;
    	  stop=LL_PWR_MODE_STOP2;
    	  blue_mode_action=BLUE_MODE_ACTIVATE_STOP;
    	  break;
    case 8:
    	  ck_config=CK_CONFIG_MSI_24MGHZ;
    	  flash_latency=LL_FLASH_LATENCY_3;
    	  voltage_scaling=LL_PWR_REGU_VOLTAGE_SCALE2;
    	  calibration=CALIBRATION_ON;
    	  sleep=SLEEP_ON;
    	  stop=LL_PWR_MODE_SHUTDOWN;
    	  blue_mode_action=BLUE_MODE_ACTIVATE_STOP;
    	  break;

    }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config(ck_config,flash_latency,voltage_scaling,calibration);

  /* USER CODE BEGIN SysInit */
  //Initialisation systick
  Systick_Init ();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if ((sleep==SLEEP_ON)||((mode==BLUE_MODE)&&(blue_mode_action==BLUE_MODE_ACTIVATE_SLEEP)))
	    {
		  LL_LPM_EnableSleep();
		  __WFI();
	    }
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(bool ck_config, uint32_t flash_latency,uint32_t voltage_scaling,bool calibration)
{
  LL_FLASH_SetLatency(flash_latency);
  while(LL_FLASH_GetLatency()!= flash_latency)
  {
  }
  LL_PWR_SetRegulVoltageScaling(voltage_scaling);
  LL_RCC_MSI_Enable();



   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
    if(ck_config==CK_CONFIG_MSI_24MGHZ){
  	  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_9);
  	 /* Wait till System clock is ready */
  	  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
  	  {

  	  }
  	  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  	  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  	  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);

  	  LL_Init1msTick(24000000);

  	  LL_SetSystemCoreClock(24000000);
    }else{
  	  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
  	  LL_RCC_MSI_SetCalibTrimming(0);
  	  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
  	  LL_RCC_PLL_EnableDomain_SYS();
  	  LL_RCC_PLL_Enable();
  	/* Wait till PLL is ready */
  	  while(LL_RCC_PLL_IsReady() != 1)
  	  {

  	  }
  	  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

  	   /* Wait till System clock is ready */
  	  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
  	  {

  	  }
  	  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  	  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  	  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);

  	  LL_Init1msTick(80000000);

  	  LL_SetSystemCoreClock(80000000);
    }

    if(calibration==CALIBRATION_ON){
    	PLL_Activate();
    }
    else{
    	PLL_Disable();
    }
}

/* USER CODE BEGIN 4 */
void Systick_Init (void)
{
	int clock=0;
	SysTick->CTRL |= (1<<2);
	SysTick->CTRL |= (1<<1);
	SystemCoreClockUpdate();
	clock=SystemCoreClock/100;
	SysTick->LOAD = clock;//SystemCoreClock/100;
	SysTick->VAL=0;
	NVIC_SetPriority(-1,0);
	SysTick->CTRL |= (1<<0);
}
void LSE_Init(void)
{
	  LL_APB1_GRP1_EnableClock( LL_APB1_GRP1_PERIPH_PWR );
	  LL_PWR_EnableBkUpAccess();
	    /* Wait till LSE is ready */
	   if(LL_RCC_LSE_IsReady() != 1)
	   {
		   LL_RCC_ForceBackupDomainReset();
		   LL_RCC_ReleaseBackupDomainReset();
		   LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
		   LL_RCC_LSE_Enable();
		   while (LL_RCC_LSE_IsReady() != 1)
		   {

		   }
		   LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
	   }
}
void SysTick_Handler(void)
{
  compteur_systick++;
  if (compteur_systick==200)
  {
	  LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_5);
  }
  else if (compteur_systick==(200+expe*50))
  {
	  LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_5);
	  compteur_systick=0;
  }
  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_10);
}

void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    mode=BLUE_MODE;
    if (blue_mode_action==BLUE_MODE_ACTIVATE_CALIBRATION)
    {
    	PLL_Activate();
    }
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}

void PLL_Activate(void)
{
	LL_RCC_MSI_EnablePLLMode();
	while(LL_RCC_MSI_IsReady() != 1)
   {

	}
	LL_RCC_MSI_SetCalibTrimming(0);
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
}

void PLL_Disable(void)
{
	LL_RCC_MSI_DisablePLLMode();
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
