
Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ea4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800202c  0800202c  0001202c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800206c  0800206c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  0800206c  0800206c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800206c  0800206c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800206c  0800206c  0001206c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002070  08002070  00012070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08002074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000008  0800207c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  0800207c  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006046  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fe7  00000000  00000000  0002607e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000708  00000000  00000000  00027068  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000670  00000000  00000000  00027770  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f1a5  00000000  00000000  00027de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004271  00000000  00000000  00046f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ad5fb  00000000  00000000  0004b1f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f87f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c94  00000000  00000000  000f886c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002014 	.word	0x08002014

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08002014 	.word	0x08002014

080001c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__NVIC_GetPriorityGrouping+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	0a1b      	lsrs	r3, r3, #8
 80001d2:	f003 0307 	and.w	r3, r3, #7
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	; (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000274:	b480      	push	{r7}
 8000276:	b089      	sub	sp, #36	; 0x24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f003 0307 	and.w	r3, r3, #7
 8000286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	f1c3 0307 	rsb	r3, r3, #7
 800028e:	2b04      	cmp	r3, #4
 8000290:	bf28      	it	cs
 8000292:	2304      	movcs	r3, #4
 8000294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3304      	adds	r3, #4
 800029a:	2b06      	cmp	r3, #6
 800029c:	d902      	bls.n	80002a4 <NVIC_EncodePriority+0x30>
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3b03      	subs	r3, #3
 80002a2:	e000      	b.n	80002a6 <NVIC_EncodePriority+0x32>
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	43da      	mvns	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	401a      	ands	r2, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002bc:	f04f 31ff 	mov.w	r1, #4294967295
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43d9      	mvns	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	4313      	orrs	r3, r2
         );
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80002e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80002f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002fa:	68fb      	ldr	r3, [r7, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000

0800030c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800030c:	b480      	push	{r7}
 800030e:	b087      	sub	sp, #28
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000316:	4a17      	ldr	r2, [pc, #92]	; (8000374 <LL_SYSCFG_SetEXTISource+0x68>)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	3302      	adds	r3, #2
 800031e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	0c1b      	lsrs	r3, r3, #16
 8000326:	43db      	mvns	r3, r3
 8000328:	ea02 0103 	and.w	r1, r2, r3
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	0c1b      	lsrs	r3, r3, #16
 8000330:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000332:	693b      	ldr	r3, [r7, #16]
 8000334:	fa93 f3a3 	rbit	r3, r3
 8000338:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d101      	bne.n	8000348 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000344:	2320      	movs	r3, #32
 8000346:	e003      	b.n	8000350 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	fab3 f383 	clz	r3, r3
 800034e:	b2db      	uxtb	r3, r3
 8000350:	461a      	mov	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	fa03 f202 	lsl.w	r2, r3, r2
 8000358:	4806      	ldr	r0, [pc, #24]	; (8000374 <LL_SYSCFG_SetEXTISource+0x68>)
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	b2db      	uxtb	r3, r3
 800035e:	430a      	orrs	r2, r1
 8000360:	3302      	adds	r3, #2
 8000362:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000366:	bf00      	nop
 8000368:	371c      	adds	r7, #28
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	40010000 	.word	0x40010000

08000378 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000378:	b480      	push	{r7}
 800037a:	b08b      	sub	sp, #44	; 0x2c
 800037c:	af00      	add	r7, sp, #0
 800037e:	60f8      	str	r0, [r7, #12]
 8000380:	60b9      	str	r1, [r7, #8]
 8000382:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	fa93 f3a3 	rbit	r3, r3
 8000392:	613b      	str	r3, [r7, #16]
  return result;
 8000394:	693b      	ldr	r3, [r7, #16]
 8000396:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000398:	69bb      	ldr	r3, [r7, #24]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d101      	bne.n	80003a2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800039e:	2320      	movs	r3, #32
 80003a0:	e003      	b.n	80003aa <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80003a2:	69bb      	ldr	r3, [r7, #24]
 80003a4:	fab3 f383 	clz	r3, r3
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	005b      	lsls	r3, r3, #1
 80003ac:	2103      	movs	r1, #3
 80003ae:	fa01 f303 	lsl.w	r3, r1, r3
 80003b2:	43db      	mvns	r3, r3
 80003b4:	401a      	ands	r2, r3
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003ba:	6a3b      	ldr	r3, [r7, #32]
 80003bc:	fa93 f3a3 	rbit	r3, r3
 80003c0:	61fb      	str	r3, [r7, #28]
  return result;
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80003c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d101      	bne.n	80003d0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80003cc:	2320      	movs	r3, #32
 80003ce:	e003      	b.n	80003d8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80003d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003d2:	fab3 f383 	clz	r3, r3
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	6879      	ldr	r1, [r7, #4]
 80003dc:	fa01 f303 	lsl.w	r3, r1, r3
 80003e0:	431a      	orrs	r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	601a      	str	r2, [r3, #0]
}
 80003e6:	bf00      	nop
 80003e8:	372c      	adds	r7, #44	; 0x2c
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr

080003f2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80003f2:	b480      	push	{r7}
 80003f4:	b08b      	sub	sp, #44	; 0x2c
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	60f8      	str	r0, [r7, #12]
 80003fa:	60b9      	str	r1, [r7, #8]
 80003fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	68da      	ldr	r2, [r3, #12]
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	fa93 f3a3 	rbit	r3, r3
 800040c:	613b      	str	r3, [r7, #16]
  return result;
 800040e:	693b      	ldr	r3, [r7, #16]
 8000410:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000412:	69bb      	ldr	r3, [r7, #24]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d101      	bne.n	800041c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000418:	2320      	movs	r3, #32
 800041a:	e003      	b.n	8000424 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800041c:	69bb      	ldr	r3, [r7, #24]
 800041e:	fab3 f383 	clz	r3, r3
 8000422:	b2db      	uxtb	r3, r3
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	2103      	movs	r1, #3
 8000428:	fa01 f303 	lsl.w	r3, r1, r3
 800042c:	43db      	mvns	r3, r3
 800042e:	401a      	ands	r2, r3
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000434:	6a3b      	ldr	r3, [r7, #32]
 8000436:	fa93 f3a3 	rbit	r3, r3
 800043a:	61fb      	str	r3, [r7, #28]
  return result;
 800043c:	69fb      	ldr	r3, [r7, #28]
 800043e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000442:	2b00      	cmp	r3, #0
 8000444:	d101      	bne.n	800044a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000446:	2320      	movs	r3, #32
 8000448:	e003      	b.n	8000452 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800044a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800044c:	fab3 f383 	clz	r3, r3
 8000450:	b2db      	uxtb	r3, r3
 8000452:	005b      	lsls	r3, r3, #1
 8000454:	6879      	ldr	r1, [r7, #4]
 8000456:	fa01 f303 	lsl.w	r3, r1, r3
 800045a:	431a      	orrs	r2, r3
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	60da      	str	r2, [r3, #12]
}
 8000460:	bf00      	nop
 8000462:	372c      	adds	r7, #44	; 0x2c
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr

0800046c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	683a      	ldr	r2, [r7, #0]
 800047a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800047c:	bf00      	nop
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr

08000488 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b08a      	sub	sp, #40	; 0x28
 800048c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800048e:	f107 031c 	add.w	r3, r7, #28
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
 80004a2:	609a      	str	r2, [r3, #8]
 80004a4:	60da      	str	r2, [r3, #12]
 80004a6:	611a      	str	r2, [r3, #16]
 80004a8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80004aa:	2004      	movs	r0, #4
 80004ac:	f7ff ff16 	bl	80002dc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80004b0:	2001      	movs	r0, #1
 80004b2:	f7ff ff13 	bl	80002dc <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 80004b6:	2120      	movs	r1, #32
 80004b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004bc:	f7ff ffd6 	bl	800046c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_10);
 80004c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004c4:	482c      	ldr	r0, [pc, #176]	; (8000578 <MX_GPIO_Init+0xf0>)
 80004c6:	f7ff ffd1 	bl	800046c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80004ca:	492c      	ldr	r1, [pc, #176]	; (800057c <MX_GPIO_Init+0xf4>)
 80004cc:	2002      	movs	r0, #2
 80004ce:	f7ff ff1d 	bl	800030c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80004d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004d6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80004d8:	2300      	movs	r3, #0
 80004da:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80004dc:	2301      	movs	r3, #1
 80004de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80004e2:	2300      	movs	r3, #0
 80004e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80004e8:	2302      	movs	r3, #2
 80004ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80004ee:	f107 031c 	add.w	r3, r7, #28
 80004f2:	4618      	mov	r0, r3
 80004f4:	f001 f986 	bl	8001804 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_13, LL_GPIO_PULL_NO);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fe:	481e      	ldr	r0, [pc, #120]	; (8000578 <MX_GPIO_Init+0xf0>)
 8000500:	f7ff ff77 	bl	80003f2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_13, LL_GPIO_MODE_INPUT);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050a:	481b      	ldr	r0, [pc, #108]	; (8000578 <MX_GPIO_Init+0xf0>)
 800050c:	f7ff ff34 	bl	8000378 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000510:	2320      	movs	r3, #32
 8000512:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000514:	2301      	movs	r3, #1
 8000516:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000518:	2300      	movs	r3, #0
 800051a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	4619      	mov	r1, r3
 8000528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052c:	f001 fba1 	bl	8001c72 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000534:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000536:	2301      	movs	r3, #1
 8000538:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	4619      	mov	r1, r3
 800054a:	480b      	ldr	r0, [pc, #44]	; (8000578 <MX_GPIO_Init+0xf0>)
 800054c:	f001 fb91 	bl	8001c72 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8000550:	f7ff fe3a 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 8000554:	4603      	mov	r3, r0
 8000556:	2200      	movs	r2, #0
 8000558:	2101      	movs	r1, #1
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff fe8a 	bl	8000274 <NVIC_EncodePriority>
 8000560:	4603      	mov	r3, r0
 8000562:	4619      	mov	r1, r3
 8000564:	2028      	movs	r0, #40	; 0x28
 8000566:	f7ff fe5b 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800056a:	2028      	movs	r0, #40	; 0x28
 800056c:	f7ff fe3a 	bl	80001e4 <__NVIC_EnableIRQ>

}
 8000570:	bf00      	nop
 8000572:	3728      	adds	r7, #40	; 0x28
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	48000800 	.word	0x48000800
 800057c:	00f00003 	.word	0x00f00003

08000580 <__NVIC_SetPriorityGrouping>:
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f003 0307 	and.w	r3, r3, #7
 800058e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800059c:	4013      	ands	r3, r2
 800059e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005b2:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <__NVIC_SetPriorityGrouping+0x44>)
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	60d3      	str	r3, [r2, #12]
}
 80005b8:	bf00      	nop
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_EnableIRQ>:
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	db0b      	blt.n	80005f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 021f 	and.w	r2, r3, #31
 80005e0:	4907      	ldr	r1, [pc, #28]	; (8000600 <__NVIC_EnableIRQ+0x38>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	095b      	lsrs	r3, r3, #5
 80005e8:	2001      	movs	r0, #1
 80005ea:	fa00 f202 	lsl.w	r2, r0, r2
 80005ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000e100 	.word	0xe000e100

08000604 <__NVIC_SetPriority>:
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	db0a      	blt.n	800062e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	b2da      	uxtb	r2, r3
 800061c:	490c      	ldr	r1, [pc, #48]	; (8000650 <__NVIC_SetPriority+0x4c>)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	0112      	lsls	r2, r2, #4
 8000624:	b2d2      	uxtb	r2, r2
 8000626:	440b      	add	r3, r1
 8000628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800062c:	e00a      	b.n	8000644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4908      	ldr	r1, [pc, #32]	; (8000654 <__NVIC_SetPriority+0x50>)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	3b04      	subs	r3, #4
 800063c:	0112      	lsls	r2, r2, #4
 800063e:	b2d2      	uxtb	r2, r2
 8000640:	440b      	add	r3, r1
 8000642:	761a      	strb	r2, [r3, #24]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000e100 	.word	0xe000e100
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <LL_RCC_LSE_Enable+0x20>)
 800065e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000662:	4a05      	ldr	r2, [pc, #20]	; (8000678 <LL_RCC_LSE_Enable+0x20>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40021000 	.word	0x40021000

0800067c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8000686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800068a:	f023 0218 	bic.w	r2, r3, #24
 800068e:	4905      	ldr	r1, [pc, #20]	; (80006a4 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4313      	orrs	r3, r2
 8000694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	40021000 	.word	0x40021000

080006a8 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <LL_RCC_LSE_IsReady+0x24>)
 80006ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d101      	bne.n	80006be <LL_RCC_LSE_IsReady+0x16>
 80006ba:	2301      	movs	r3, #1
 80006bc:	e000      	b.n	80006c0 <LL_RCC_LSE_IsReady+0x18>
 80006be:	2300      	movs	r3, #0
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000

080006d0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <LL_RCC_MSI_Enable+0x1c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a04      	ldr	r2, [pc, #16]	; (80006ec <LL_RCC_MSI_Enable+0x1c>)
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40021000 	.word	0x40021000

080006f0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <LL_RCC_MSI_IsReady+0x20>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f003 0302 	and.w	r3, r3, #2
 80006fc:	2b02      	cmp	r3, #2
 80006fe:	d101      	bne.n	8000704 <LL_RCC_MSI_IsReady+0x14>
 8000700:	2301      	movs	r3, #1
 8000702:	e000      	b.n	8000706 <LL_RCC_MSI_IsReady+0x16>
 8000704:	2300      	movs	r3, #0
}
 8000706:	4618      	mov	r0, r3
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	40021000 	.word	0x40021000

08000714 <LL_RCC_MSI_EnablePLLMode>:
  *       ready
  * @rmtoll CR           MSIPLLEN      LL_RCC_MSI_EnablePLLMode
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnablePLLMode(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a04      	ldr	r2, [pc, #16]	; (8000730 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6013      	str	r3, [r2, #0]
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000

08000734 <LL_RCC_MSI_DisablePLLMode>:
  *       the Clock Security System on LSE detects a LSE failure
  * @rmtoll CR           MSIPLLEN      LL_RCC_MSI_DisablePLLMode
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_DisablePLLMode(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <LL_RCC_MSI_DisablePLLMode+0x1c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <LL_RCC_MSI_DisablePLLMode+0x1c>)
 800073e:	f023 0304 	bic.w	r3, r3, #4
 8000742:	6013      	str	r3, [r2, #0]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000

08000754 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a04      	ldr	r2, [pc, #16]	; (8000770 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800075e:	f043 0308 	orr.w	r3, r3, #8
 8000762:	6013      	str	r3, [r2, #0]
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000

08000774 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <LL_RCC_MSI_SetRange+0x24>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000784:	4904      	ldr	r1, [pc, #16]	; (8000798 <LL_RCC_MSI_SetRange+0x24>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4313      	orrs	r3, r2
 800078a:	600b      	str	r3, [r1, #0]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	40021000 	.word	0x40021000

0800079c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	021b      	lsls	r3, r3, #8
 80007b0:	4904      	ldr	r1, [pc, #16]	; (80007c4 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80007b2:	4313      	orrs	r3, r2
 80007b4:	604b      	str	r3, [r1, #4]
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000

080007c8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <LL_RCC_SetSysClkSource+0x24>)
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	f023 0203 	bic.w	r2, r3, #3
 80007d8:	4904      	ldr	r1, [pc, #16]	; (80007ec <LL_RCC_SetSysClkSource+0x24>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4313      	orrs	r3, r2
 80007de:	608b      	str	r3, [r1, #8]
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	40021000 	.word	0x40021000

080007f0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <LL_RCC_GetSysClkSource+0x18>)
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	f003 030c 	and.w	r3, r3, #12
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <LL_RCC_SetAHBPrescaler+0x24>)
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800081c:	4904      	ldr	r1, [pc, #16]	; (8000830 <LL_RCC_SetAHBPrescaler+0x24>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4313      	orrs	r3, r2
 8000822:	608b      	str	r3, [r1, #8]
}
 8000824:	bf00      	nop
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	40021000 	.word	0x40021000

08000834 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <LL_RCC_SetAPB1Prescaler+0x24>)
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000844:	4904      	ldr	r1, [pc, #16]	; (8000858 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4313      	orrs	r3, r2
 800084a:	608b      	str	r3, [r1, #8]
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	40021000 	.word	0x40021000

0800085c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800086c:	4904      	ldr	r1, [pc, #16]	; (8000880 <LL_RCC_SetAPB2Prescaler+0x24>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4313      	orrs	r3, r2
 8000872:	608b      	str	r3, [r1, #8]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	40021000 	.word	0x40021000

08000884 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <LL_RCC_SetRTCClockSource+0x28>)
 800088e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000892:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000896:	4905      	ldr	r1, [pc, #20]	; (80008ac <LL_RCC_SetRTCClockSource+0x28>)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4313      	orrs	r3, r2
 800089c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	40021000 	.word	0x40021000

080008b0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <LL_RCC_ForceBackupDomainReset+0x20>)
 80008b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008ba:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <LL_RCC_ForceBackupDomainReset+0x20>)
 80008bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000

080008d4 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 80008da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008de:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 80008e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40021000 	.word	0x40021000

080008f8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <LL_RCC_PLL_Enable+0x1c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <LL_RCC_PLL_Enable+0x1c>)
 8000902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000906:	6013      	str	r3, [r2, #0]
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000

08000918 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <LL_RCC_PLL_IsReady+0x24>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000924:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000928:	d101      	bne.n	800092e <LL_RCC_PLL_IsReady+0x16>
 800092a:	2301      	movs	r3, #1
 800092c:	e000      	b.n	8000930 <LL_RCC_PLL_IsReady+0x18>
 800092e:	2300      	movs	r3, #0
}
 8000930:	4618      	mov	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000

08000940 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
 800094c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000950:	68da      	ldr	r2, [r3, #12]
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000954:	4013      	ands	r3, r2
 8000956:	68f9      	ldr	r1, [r7, #12]
 8000958:	68ba      	ldr	r2, [r7, #8]
 800095a:	4311      	orrs	r1, r2
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	0212      	lsls	r2, r2, #8
 8000960:	4311      	orrs	r1, r2
 8000962:	683a      	ldr	r2, [r7, #0]
 8000964:	430a      	orrs	r2, r1
 8000966:	4904      	ldr	r1, [pc, #16]	; (8000978 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000968:	4313      	orrs	r3, r2
 800096a:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800096c:	bf00      	nop
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	40021000 	.word	0x40021000
 800097c:	f9ff808c 	.word	0xf9ff808c

08000980 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800098a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800098e:	60d3      	str	r3, [r2, #12]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000

080009a0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80009aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009ac:	4907      	ldr	r1, [pc, #28]	; (80009cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80009b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4013      	ands	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009be:	68fb      	ldr	r3, [r7, #12]
}
 80009c0:	bf00      	nop
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	40021000 	.word	0x40021000

080009d0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80009da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009dc:	4907      	ldr	r1, [pc, #28]	; (80009fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <LL_APB2_GRP1_EnableClock+0x2c>)
 80009e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4013      	ands	r3, r2
 80009ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009ee:	68fb      	ldr	r3, [r7, #12]
}
 80009f0:	bf00      	nop
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	40021000 	.word	0x40021000

08000a00 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <LL_FLASH_SetLatency+0x24>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f023 0207 	bic.w	r2, r3, #7
 8000a10:	4904      	ldr	r1, [pc, #16]	; (8000a24 <LL_FLASH_SetLatency+0x24>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	600b      	str	r3, [r1, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	40022000 	.word	0x40022000

08000a28 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <LL_FLASH_GetLatency+0x18>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f003 0307 	and.w	r3, r3, #7
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40022000 	.word	0x40022000

08000a44 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <LL_EXTI_EnableIT_0_31+0x20>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4904      	ldr	r1, [pc, #16]	; (8000a64 <LL_EXTI_EnableIT_0_31+0x20>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	600b      	str	r3, [r1, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	40010400 	.word	0x40010400

08000a68 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a72:	689a      	ldr	r2, [r3, #8]
 8000a74:	4904      	ldr	r1, [pc, #16]	; (8000a88 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	608b      	str	r3, [r1, #8]

}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	40010400 	.word	0x40010400

08000a8c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8000a94:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000a96:	695a      	ldr	r2, [r3, #20]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d101      	bne.n	8000aa6 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e000      	b.n	8000aa8 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8000aa6:	2300      	movs	r3, #0
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	40010400 	.word	0x40010400

08000ab8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6153      	str	r3, [r2, #20]
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40010400 	.word	0x40010400

08000ad8 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <LL_LPM_EnableSleep+0x1c>)
 8000ade:	691b      	ldr	r3, [r3, #16]
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <LL_LPM_EnableSleep+0x1c>)
 8000ae2:	f023 0304 	bic.w	r3, r3, #4
 8000ae6:	6113      	str	r3, [r2, #16]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <LL_LPM_EnableDeepSleep+0x1c>)
 8000afe:	691b      	ldr	r3, [r3, #16]
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <LL_LPM_EnableDeepSleep+0x1c>)
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	6113      	str	r3, [r2, #16]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000b28:	4904      	ldr	r1, [pc, #16]	; (8000b3c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	600b      	str	r3, [r1, #0]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	40007000 	.word	0x40007000

08000b40 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <LL_PWR_EnableBkUpAccess+0x1c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <LL_PWR_EnableBkUpAccess+0x1c>)
 8000b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40007000 	.word	0x40007000

08000b60 <LL_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <LL_PWR_SetPowerMode+0x24>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f023 0207 	bic.w	r2, r3, #7
 8000b70:	4904      	ldr	r1, [pc, #16]	; (8000b84 <LL_PWR_SetPowerMode+0x24>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	600b      	str	r3, [r1, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	40007000 	.word	0x40007000

08000b88 <LL_PWR_EnableInternWU>:
  * @brief  Enable Internal Wake-up line
  * @rmtoll CR3          EIWF          LL_PWR_EnableInternWU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableInternWU(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_EIWF);
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <LL_PWR_EnableInternWU+0x1c>)
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <LL_PWR_EnableInternWU+0x1c>)
 8000b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b96:	6093      	str	r3, [r2, #8]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40007000 	.word	0x40007000

08000ba8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	22ff      	movs	r2, #255	; 0xff
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	22ca      	movs	r2, #202	; 0xca
 8000bce:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2253      	movs	r2, #83	; 0x53
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <LL_RTC_WAKEUP_Enable>:
  * @rmtoll RTC_CR           WUTE          LL_RTC_WAKEUP_Enable
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_Enable(RTC_TypeDef *RTCx)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CR, RTC_CR_WUTE);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <LL_RTC_WAKEUP_Disable>:
  * @rmtoll RTC_CR           WUTE          LL_RTC_WAKEUP_Disable
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_Disable(RTC_TypeDef *RTCx)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CR, RTC_CR_WUTE);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	609a      	str	r2, [r3, #8]
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f023 0207 	bic.w	r2, r3, #7
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	431a      	orrs	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <LL_RTC_WAKEUP_SetAutoReload>:
  * @param  RTCx RTC Instance
  * @param  Value Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetAutoReload(RTC_TypeDef *RTCx, uint32_t Value)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->WUTR, RTC_WUTR_WUT, Value);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	0c1b      	lsrs	r3, r3, #16
 8000c58:	041b      	lsls	r3, r3, #16
 8000c5a:	683a      	ldr	r2, [r7, #0]
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	615a      	str	r2, [r3, #20]
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <LL_RTC_BAK_SetRegister>:
  *         @arg @ref LL_RTC_BKP_DR31
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_BAK_SetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister, uint32_t Data)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b087      	sub	sp, #28
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3350      	adds	r3, #80	; 0x50
 8000c82:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	601a      	str	r2, [r3, #0]
}
 8000c94:	bf00      	nop
 8000c96:	371c      	adds	r7, #28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <LL_RTC_BAK_GetRegister>:
  *         @arg @ref LL_RTC_BKP_DR30
  *         @arg @ref LL_RTC_BKP_DR31
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	3350      	adds	r3, #80	; 0x50
 8000cb2:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	4413      	add	r3, r2
 8000cbc:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <LL_RTC_ClearFlag_WUT>:
  * @rmtoll ISR          WUTF          LL_RTC_ClearFlag_WUT
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_WUT(RTC_TypeDef *RTCx)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_WUTF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	f463 6290 	orn	r2, r3, #1152	; 0x480
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	60da      	str	r2, [r3, #12]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <LL_RTC_IsActiveFlag_WUTW>:
  * @rmtoll ISR          WUTWF         LL_RTC_IsActiveFlag_WUTW
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_WUTW(RTC_TypeDef *RTCx)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_WUTWF) == (RTC_ISR_WUTWF));
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	f003 0304 	and.w	r3, r3, #4
 8000d00:	2b04      	cmp	r3, #4
 8000d02:	bf0c      	ite	eq
 8000d04:	2301      	moveq	r3, #1
 8000d06:	2300      	movne	r3, #0
 8000d08:	b2db      	uxtb	r3, r3
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <LL_RTC_EnableIT_WUT>:
  * @rmtoll RTC_CR          WUTIE         LL_RTC_EnableIT_WUT
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableIT_WUT(RTC_TypeDef *RTCx)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CR, RTC_CR_WUTIE);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	609a      	str	r2, [r3, #8]
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b085      	sub	sp, #20
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	041a      	lsls	r2, r3, #16
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	43d9      	mvns	r1, r3
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	400b      	ands	r3, r1
 8000d56:	431a      	orrs	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	619a      	str	r2, [r3, #24]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f7ff fe2e 	bl	80009d0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000d74:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000d78:	f7ff fe12 	bl	80009a0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7c:	2003      	movs	r0, #3
 8000d7e:	f7ff fbff 	bl	8000580 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* USER CODE BEGIN Init */
  //Initialisation LSE et RTC uniquement lors d'un démarrage à froid
  if(LL_RCC_LSE_IsReady() != 1)
 8000d82:	f7ff fc91 	bl	80006a8 <LL_RCC_LSE_IsReady>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d003      	beq.n	8000d94 <main+0x2c>
     {
   	  LSE_Init();
 8000d8c:	f000 f9b6 	bl	80010fc <LSE_Init>
   	  MX_RTC_Init();
 8000d90:	f000 faaa 	bl	80012e8 <MX_RTC_Init>
     }

  //Récupération expe dans Bckup domain et incrémentation
   LL_APB1_GRP1_EnableClock( LL_APB1_GRP1_PERIPH_PWR );
 8000d94:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000d98:	f7ff fe02 	bl	80009a0 <LL_APB1_GRP1_EnableClock>
   LL_PWR_EnableBkUpAccess();
 8000d9c:	f7ff fed0 	bl	8000b40 <LL_PWR_EnableBkUpAccess>
   LL_RTC_DisableWriteProtection(RTC);
 8000da0:	4879      	ldr	r0, [pc, #484]	; (8000f88 <main+0x220>)
 8000da2:	f7ff ff0e 	bl	8000bc2 <LL_RTC_DisableWriteProtection>
   expe=LL_RTC_BAK_GetRegister(RTC, 0)+1;
 8000da6:	2100      	movs	r1, #0
 8000da8:	4877      	ldr	r0, [pc, #476]	; (8000f88 <main+0x220>)
 8000daa:	f7ff ff79 	bl	8000ca0 <LL_RTC_BAK_GetRegister>
 8000dae:	4603      	mov	r3, r0
 8000db0:	3301      	adds	r3, #1
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b75      	ldr	r3, [pc, #468]	; (8000f8c <main+0x224>)
 8000db6:	601a      	str	r2, [r3, #0]
   if (expe==9)
 8000db8:	4b74      	ldr	r3, [pc, #464]	; (8000f8c <main+0x224>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b09      	cmp	r3, #9
 8000dbe:	d108      	bne.n	8000dd2 <main+0x6a>
   {
	   expe=1;
 8000dc0:	4b72      	ldr	r3, [pc, #456]	; (8000f8c <main+0x224>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]
	   LL_RTC_BAK_SetRegister(RTC, 0, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	486f      	ldr	r0, [pc, #444]	; (8000f88 <main+0x220>)
 8000dcc:	f7ff ff4f 	bl	8000c6e <LL_RTC_BAK_SetRegister>
 8000dd0:	e006      	b.n	8000de0 <main+0x78>
   }
   else
   {
	   LL_RTC_BAK_SetRegister(RTC, 0, expe);
 8000dd2:	4b6e      	ldr	r3, [pc, #440]	; (8000f8c <main+0x224>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	2100      	movs	r1, #0
 8000dda:	486b      	ldr	r0, [pc, #428]	; (8000f88 <main+0x220>)
 8000ddc:	f7ff ff47 	bl	8000c6e <LL_RTC_BAK_SetRegister>
   }
   LL_RTC_EnableWriteProtection(RTC);
 8000de0:	4869      	ldr	r0, [pc, #420]	; (8000f88 <main+0x220>)
 8000de2:	f7ff fee1 	bl	8000ba8 <LL_RTC_EnableWriteProtection>

  //Définition des paramètres de chaque experience selon la valeur de expe
    switch(expe)
 8000de6:	4b69      	ldr	r3, [pc, #420]	; (8000f8c <main+0x224>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	2b07      	cmp	r3, #7
 8000dee:	f200 8093 	bhi.w	8000f18 <main+0x1b0>
 8000df2:	a201      	add	r2, pc, #4	; (adr r2, 8000df8 <main+0x90>)
 8000df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df8:	08000e19 	.word	0x08000e19
 8000dfc:	08000e37 	.word	0x08000e37
 8000e00:	08000e55 	.word	0x08000e55
 8000e04:	08000e73 	.word	0x08000e73
 8000e08:	08000e91 	.word	0x08000e91
 8000e0c:	08000eb3 	.word	0x08000eb3
 8000e10:	08000ed5 	.word	0x08000ed5
 8000e14:	08000ef7 	.word	0x08000ef7
    {
    case 1:
  	  ck_config=CK_CONFIG_PLL_80MGHZ;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	75fb      	strb	r3, [r7, #23]
  	  flash_latency=LL_FLASH_LATENCY_4;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	613b      	str	r3, [r7, #16]
  	  voltage_scaling=LL_PWR_REGU_VOLTAGE_SCALE1;
 8000e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e24:	60fb      	str	r3, [r7, #12]
  	  calibration=CALIBRATION_OFF;
 8000e26:	2300      	movs	r3, #0
 8000e28:	72fb      	strb	r3, [r7, #11]
  	  sleep=SLEEP_OFF;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	72bb      	strb	r3, [r7, #10]
  	  blue_mode_action=BLUE_MODE_ACTIVATE_SLEEP;
 8000e2e:	4b58      	ldr	r3, [pc, #352]	; (8000f90 <main+0x228>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
  	  break;
 8000e34:	e070      	b.n	8000f18 <main+0x1b0>
    case 2:
  	  ck_config=CK_CONFIG_MSI_24MGHZ;
 8000e36:	2301      	movs	r3, #1
 8000e38:	75fb      	strb	r3, [r7, #23]
  	  flash_latency=LL_FLASH_LATENCY_1;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	613b      	str	r3, [r7, #16]
  	  voltage_scaling=LL_PWR_REGU_VOLTAGE_SCALE1;
 8000e3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e42:	60fb      	str	r3, [r7, #12]
  	  calibration=CALIBRATION_OFF;
 8000e44:	2300      	movs	r3, #0
 8000e46:	72fb      	strb	r3, [r7, #11]
  	  sleep=SLEEP_OFF;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	72bb      	strb	r3, [r7, #10]
  	  blue_mode_action=BLUE_MODE_ACTIVATE_CALIBRATION;
 8000e4c:	4b50      	ldr	r3, [pc, #320]	; (8000f90 <main+0x228>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	701a      	strb	r2, [r3, #0]
  	  break;
 8000e52:	e061      	b.n	8000f18 <main+0x1b0>
    case 3:
      ck_config=CK_CONFIG_MSI_24MGHZ;
 8000e54:	2301      	movs	r3, #1
 8000e56:	75fb      	strb	r3, [r7, #23]
      flash_latency=LL_FLASH_LATENCY_3;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	613b      	str	r3, [r7, #16]
      voltage_scaling=LL_PWR_REGU_VOLTAGE_SCALE2;
 8000e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e60:	60fb      	str	r3, [r7, #12]
      calibration=CALIBRATION_OFF;
 8000e62:	2300      	movs	r3, #0
 8000e64:	72fb      	strb	r3, [r7, #11]
      sleep=SLEEP_OFF;
 8000e66:	2300      	movs	r3, #0
 8000e68:	72bb      	strb	r3, [r7, #10]
      blue_mode_action=BLUE_MODE_ACTIVATE_SLEEP;
 8000e6a:	4b49      	ldr	r3, [pc, #292]	; (8000f90 <main+0x228>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
      break;
 8000e70:	e052      	b.n	8000f18 <main+0x1b0>
    case 4:
      ck_config=CK_CONFIG_MSI_24MGHZ;
 8000e72:	2301      	movs	r3, #1
 8000e74:	75fb      	strb	r3, [r7, #23]
      flash_latency=LL_FLASH_LATENCY_3;
 8000e76:	2303      	movs	r3, #3
 8000e78:	613b      	str	r3, [r7, #16]
      voltage_scaling=LL_PWR_REGU_VOLTAGE_SCALE2;
 8000e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7e:	60fb      	str	r3, [r7, #12]
      calibration=CALIBRATION_OFF;
 8000e80:	2300      	movs	r3, #0
 8000e82:	72fb      	strb	r3, [r7, #11]
      sleep=SLEEP_OFF;
 8000e84:	2300      	movs	r3, #0
 8000e86:	72bb      	strb	r3, [r7, #10]
      blue_mode_action=BLUE_MODE_ACTIVATE_CALIBRATION;
 8000e88:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <main+0x228>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
      break;
 8000e8e:	e043      	b.n	8000f18 <main+0x1b0>
    case 5:
  	  ck_config=CK_CONFIG_MSI_24MGHZ;
 8000e90:	2301      	movs	r3, #1
 8000e92:	75fb      	strb	r3, [r7, #23]
  	  flash_latency=LL_FLASH_LATENCY_3;
 8000e94:	2303      	movs	r3, #3
 8000e96:	613b      	str	r3, [r7, #16]
  	  voltage_scaling=LL_PWR_REGU_VOLTAGE_SCALE2;
 8000e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e9c:	60fb      	str	r3, [r7, #12]
  	  calibration=CALIBRATION_ON;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	72fb      	strb	r3, [r7, #11]
  	  sleep=SLEEP_ON;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	72bb      	strb	r3, [r7, #10]
  	  stop=LL_PWR_MODE_STOP0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
  	  blue_mode_action=BLUE_MODE_ACTIVATE_STOP;
 8000eaa:	4b39      	ldr	r3, [pc, #228]	; (8000f90 <main+0x228>)
 8000eac:	2202      	movs	r2, #2
 8000eae:	701a      	strb	r2, [r3, #0]
  	  break;
 8000eb0:	e032      	b.n	8000f18 <main+0x1b0>
    case 6:
      ck_config=CK_CONFIG_MSI_24MGHZ;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	75fb      	strb	r3, [r7, #23]
      flash_latency=LL_FLASH_LATENCY_3;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	613b      	str	r3, [r7, #16]
  	  voltage_scaling=LL_PWR_REGU_VOLTAGE_SCALE2;
 8000eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ebe:	60fb      	str	r3, [r7, #12]
  	  calibration=CALIBRATION_ON;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	72fb      	strb	r3, [r7, #11]
      sleep=SLEEP_ON;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	72bb      	strb	r3, [r7, #10]
   	  stop=LL_PWR_MODE_STOP1;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	607b      	str	r3, [r7, #4]
   	  blue_mode_action=BLUE_MODE_ACTIVATE_STOP;
 8000ecc:	4b30      	ldr	r3, [pc, #192]	; (8000f90 <main+0x228>)
 8000ece:	2202      	movs	r2, #2
 8000ed0:	701a      	strb	r2, [r3, #0]
   	  break;
 8000ed2:	e021      	b.n	8000f18 <main+0x1b0>
    case 7:
      ck_config=CK_CONFIG_MSI_24MGHZ;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	75fb      	strb	r3, [r7, #23]
      flash_latency=LL_FLASH_LATENCY_3;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	613b      	str	r3, [r7, #16]
      voltage_scaling=LL_PWR_REGU_VOLTAGE_SCALE2;
 8000edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee0:	60fb      	str	r3, [r7, #12]
      calibration=CALIBRATION_ON;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	72fb      	strb	r3, [r7, #11]
      sleep=SLEEP_ON;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	72bb      	strb	r3, [r7, #10]
      stop=LL_PWR_MODE_STOP2;
 8000eea:	2302      	movs	r3, #2
 8000eec:	607b      	str	r3, [r7, #4]
      blue_mode_action=BLUE_MODE_ACTIVATE_STOP;
 8000eee:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <main+0x228>)
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	701a      	strb	r2, [r3, #0]
      break;
 8000ef4:	e010      	b.n	8000f18 <main+0x1b0>
    case 8:
      ck_config=CK_CONFIG_MSI_24MGHZ;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	75fb      	strb	r3, [r7, #23]
      flash_latency=LL_FLASH_LATENCY_3;
 8000efa:	2303      	movs	r3, #3
 8000efc:	613b      	str	r3, [r7, #16]
      voltage_scaling=LL_PWR_REGU_VOLTAGE_SCALE2;
 8000efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f02:	60fb      	str	r3, [r7, #12]
  	  calibration=CALIBRATION_ON;
 8000f04:	2301      	movs	r3, #1
 8000f06:	72fb      	strb	r3, [r7, #11]
      sleep=SLEEP_ON;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	72bb      	strb	r3, [r7, #10]
      stop=LL_PWR_MODE_SHUTDOWN;
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	607b      	str	r3, [r7, #4]
   	  blue_mode_action=BLUE_MODE_ACTIVATE_STOP;
 8000f10:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <main+0x228>)
 8000f12:	2202      	movs	r2, #2
 8000f14:	701a      	strb	r2, [r3, #0]
   	  break;
 8000f16:	bf00      	nop
    }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config(ck_config,flash_latency,voltage_scaling,calibration);
 8000f18:	7afb      	ldrb	r3, [r7, #11]
 8000f1a:	7df8      	ldrb	r0, [r7, #23]
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	6939      	ldr	r1, [r7, #16]
 8000f20:	f000 f83a 	bl	8000f98 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  //Initialisation systick
  Systick_Init ();
 8000f24:	f000 f8b4 	bl	8001090 <Systick_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f28:	f7ff faae 	bl	8000488 <MX_GPIO_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Activation du sleep en blue mode OU lorsque le sleep est activé en normal mode (exp. 5 à8)
	  if (((sleep==SLEEP_ON)&&(mode==NORMAL_MODE))||((mode==BLUE_MODE)&&(blue_mode_action==BLUE_MODE_ACTIVATE_SLEEP)))
 8000f2c:	7abb      	ldrb	r3, [r7, #10]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <main+0x1d2>
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <main+0x22c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d007      	beq.n	8000f4a <main+0x1e2>
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <main+0x22c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d106      	bne.n	8000f50 <main+0x1e8>
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <main+0x228>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d102      	bne.n	8000f50 <main+0x1e8>
	    {
		  LL_LPM_EnableSleep();
 8000f4a:	f7ff fdc5 	bl	8000ad8 <LL_LPM_EnableSleep>
		  __WFI();
 8000f4e:	bf30      	wfi
	    }
	  //Activation du stop en blue mode
	  if ((mode==BLUE_MODE)&&(blue_mode_action==BLUE_MODE_ACTIVATE_STOP))
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <main+0x22c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d1e9      	bne.n	8000f2c <main+0x1c4>
 8000f58:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <main+0x228>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d1e5      	bne.n	8000f2c <main+0x1c4>
	  	{
		  	mode=NORMAL_MODE;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <main+0x22c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
	  		LL_PWR_SetPowerMode(stop);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff fdfa 	bl	8000b60 <LL_PWR_SetPowerMode>
	  		if (stop==LL_PWR_MODE_SHUTDOWN) //cas shutdown (exp 8)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	d103      	bne.n	8000f7a <main+0x212>
	  			RTC_wakeup_init_from_standby_or_shutdown(10);
 8000f72:	200a      	movs	r0, #10
 8000f74:	f000 f976 	bl	8001264 <RTC_wakeup_init_from_standby_or_shutdown>
 8000f78:	e002      	b.n	8000f80 <main+0x218>
	  		else //cas stop (exp 5 à 8)
	  			RTC_wakeup_init_from_stop(10);
 8000f7a:	200a      	movs	r0, #10
 8000f7c:	f000 f97f 	bl	800127e <RTC_wakeup_init_from_stop>

	  		LL_LPM_EnableDeepSleep();
 8000f80:	f7ff fdba 	bl	8000af8 <LL_LPM_EnableDeepSleep>
	  		__WFI();
 8000f84:	bf30      	wfi
	  if (((sleep==SLEEP_ON)&&(mode==NORMAL_MODE))||((mode==BLUE_MODE)&&(blue_mode_action==BLUE_MODE_ACTIVATE_SLEEP)))
 8000f86:	e7d1      	b.n	8000f2c <main+0x1c4>
 8000f88:	40002800 	.word	0x40002800
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	2000002c 	.word	0x2000002c
 8000f94:	20000028 	.word	0x20000028

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(bool ck_config, uint32_t flash_latency,uint32_t voltage_scaling,bool calibration)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73fb      	strb	r3, [r7, #15]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	73bb      	strb	r3, [r7, #14]
  //Gestion flash latency et voltage scaling
  LL_FLASH_SetLatency(flash_latency);
 8000fac:	68b8      	ldr	r0, [r7, #8]
 8000fae:	f7ff fd27 	bl	8000a00 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= flash_latency)
 8000fb2:	bf00      	nop
 8000fb4:	f7ff fd38 	bl	8000a28 <LL_FLASH_GetLatency>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d1f9      	bne.n	8000fb4 <SystemClock_Config+0x1c>
  {
  }
  LL_PWR_SetRegulVoltageScaling(voltage_scaling);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff fda9 	bl	8000b18 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 8000fc6:	f7ff fb83 	bl	80006d0 <LL_RCC_MSI_Enable>



   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8000fca:	bf00      	nop
 8000fcc:	f7ff fb90 	bl	80006f0 <LL_RCC_MSI_IsReady>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d1fa      	bne.n	8000fcc <SystemClock_Config+0x34>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8000fd6:	f7ff fbbd 	bl	8000754 <LL_RCC_MSI_EnableRangeSelection>
  //Gestion fréquence de clock et PLL
    if(ck_config==CK_CONFIG_MSI_24MGHZ){ //Cas MSI à 24MHz sans PLL
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d018      	beq.n	8001012 <SystemClock_Config+0x7a>
  	  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_9);
 8000fe0:	2090      	movs	r0, #144	; 0x90
 8000fe2:	f7ff fbc7 	bl	8000774 <LL_RCC_MSI_SetRange>
  	 /* Wait till System clock is ready */
  	  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 8000fe6:	bf00      	nop
 8000fe8:	f7ff fc02 	bl	80007f0 <LL_RCC_GetSysClkSource>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1fa      	bne.n	8000fe8 <SystemClock_Config+0x50>
  	  {

  	  }
  	  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f7ff fc0a 	bl	800080c <LL_RCC_SetAHBPrescaler>
  	  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff fc1b 	bl	8000834 <LL_RCC_SetAPB1Prescaler>
  	  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f7ff fc2c 	bl	800085c <LL_RCC_SetAPB2Prescaler>

  	  LL_Init1msTick(24000000);
 8001004:	4820      	ldr	r0, [pc, #128]	; (8001088 <SystemClock_Config+0xf0>)
 8001006:	f000 ffc3 	bl	8001f90 <LL_Init1msTick>

  	  LL_SetSystemCoreClock(24000000);
 800100a:	481f      	ldr	r0, [pc, #124]	; (8001088 <SystemClock_Config+0xf0>)
 800100c:	f000 ffce 	bl	8001fac <LL_SetSystemCoreClock>
 8001010:	e02d      	b.n	800106e <SystemClock_Config+0xd6>
    }else{								//Cas MSI 4Mhz et PLL à 80MHz
  	  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8001012:	2060      	movs	r0, #96	; 0x60
 8001014:	f7ff fbae 	bl	8000774 <LL_RCC_MSI_SetRange>
  	  LL_RCC_MSI_SetCalibTrimming(0);
 8001018:	2000      	movs	r0, #0
 800101a:	f7ff fbbf 	bl	800079c <LL_RCC_MSI_SetCalibTrimming>
  	  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 800101e:	2300      	movs	r3, #0
 8001020:	2228      	movs	r2, #40	; 0x28
 8001022:	2100      	movs	r1, #0
 8001024:	2001      	movs	r0, #1
 8001026:	f7ff fc8b 	bl	8000940 <LL_RCC_PLL_ConfigDomain_SYS>
  	  LL_RCC_PLL_EnableDomain_SYS();
 800102a:	f7ff fca9 	bl	8000980 <LL_RCC_PLL_EnableDomain_SYS>
  	  LL_RCC_PLL_Enable();
 800102e:	f7ff fc63 	bl	80008f8 <LL_RCC_PLL_Enable>
  	/* Wait till PLL is ready */
  	  while(LL_RCC_PLL_IsReady() != 1)
 8001032:	bf00      	nop
 8001034:	f7ff fc70 	bl	8000918 <LL_RCC_PLL_IsReady>
 8001038:	4603      	mov	r3, r0
 800103a:	2b01      	cmp	r3, #1
 800103c:	d1fa      	bne.n	8001034 <SystemClock_Config+0x9c>
  	  {

  	  }
  	  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800103e:	2003      	movs	r0, #3
 8001040:	f7ff fbc2 	bl	80007c8 <LL_RCC_SetSysClkSource>

  	   /* Wait till System clock is ready */
  	  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001044:	bf00      	nop
 8001046:	f7ff fbd3 	bl	80007f0 <LL_RCC_GetSysClkSource>
 800104a:	4603      	mov	r3, r0
 800104c:	2b0c      	cmp	r3, #12
 800104e:	d1fa      	bne.n	8001046 <SystemClock_Config+0xae>
  	  {

  	  }
  	  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001050:	2000      	movs	r0, #0
 8001052:	f7ff fbdb 	bl	800080c <LL_RCC_SetAHBPrescaler>
  	  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001056:	2000      	movs	r0, #0
 8001058:	f7ff fbec 	bl	8000834 <LL_RCC_SetAPB1Prescaler>
  	  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800105c:	2000      	movs	r0, #0
 800105e:	f7ff fbfd 	bl	800085c <LL_RCC_SetAPB2Prescaler>

  	  LL_Init1msTick(80000000);
 8001062:	480a      	ldr	r0, [pc, #40]	; (800108c <SystemClock_Config+0xf4>)
 8001064:	f000 ff94 	bl	8001f90 <LL_Init1msTick>

  	  LL_SetSystemCoreClock(80000000);
 8001068:	4808      	ldr	r0, [pc, #32]	; (800108c <SystemClock_Config+0xf4>)
 800106a:	f000 ff9f 	bl	8001fac <LL_SetSystemCoreClock>
    }
    //Gestion Calibration
    if(calibration==CALIBRATION_ON){
 800106e:	7bbb      	ldrb	r3, [r7, #14]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <SystemClock_Config+0xe2>
    	PLL_Activate();
 8001074:	f000 f8b2 	bl	80011dc <PLL_Activate>
    }
    else{
    	PLL_Disable();
    }
}
 8001078:	e001      	b.n	800107e <SystemClock_Config+0xe6>
    	PLL_Disable();
 800107a:	f000 f8c1 	bl	8001200 <PLL_Disable>
}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	016e3600 	.word	0x016e3600
 800108c:	04c4b400 	.word	0x04c4b400

08001090 <Systick_Init>:

/* USER CODE BEGIN 4 */
void Systick_Init (void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
	int clock=0;
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
	SysTick->CTRL |= (1<<2);
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <Systick_Init+0x60>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <Systick_Init+0x60>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= (1<<1);
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <Systick_Init+0x60>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a11      	ldr	r2, [pc, #68]	; (80010f0 <Systick_Init+0x60>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	6013      	str	r3, [r2, #0]
	SystemCoreClockUpdate();
 80010b2:	f000 f993 	bl	80013dc <SystemCoreClockUpdate>
	clock=SystemCoreClock/100;
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <Systick_Init+0x64>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a0f      	ldr	r2, [pc, #60]	; (80010f8 <Systick_Init+0x68>)
 80010bc:	fba2 2303 	umull	r2, r3, r2, r3
 80010c0:	095b      	lsrs	r3, r3, #5
 80010c2:	607b      	str	r3, [r7, #4]
	SysTick->LOAD = clock;//SystemCoreClock/100;
 80010c4:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <Systick_Init+0x60>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0;
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <Systick_Init+0x60>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
	NVIC_SetPriority(-1,0);
 80010d0:	2100      	movs	r1, #0
 80010d2:	f04f 30ff 	mov.w	r0, #4294967295
 80010d6:	f7ff fa95 	bl	8000604 <__NVIC_SetPriority>
	SysTick->CTRL |= (1<<0);
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <Systick_Init+0x60>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <Systick_Init+0x60>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6013      	str	r3, [r2, #0]
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	e000e010 	.word	0xe000e010
 80010f4:	20000004 	.word	0x20000004
 80010f8:	51eb851f 	.word	0x51eb851f

080010fc <LSE_Init>:

void LSE_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	  LL_APB1_GRP1_EnableClock( LL_APB1_GRP1_PERIPH_PWR );
 8001100:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001104:	f7ff fc4c 	bl	80009a0 <LL_APB1_GRP1_EnableClock>
	  LL_PWR_EnableBkUpAccess();
 8001108:	f7ff fd1a 	bl	8000b40 <LL_PWR_EnableBkUpAccess>
	    /* Wait till LSE is ready */
	   if(LL_RCC_LSE_IsReady() != 1)
 800110c:	f7ff facc 	bl	80006a8 <LL_RCC_LSE_IsReady>
 8001110:	4603      	mov	r3, r0
 8001112:	2b01      	cmp	r3, #1
 8001114:	d012      	beq.n	800113c <LSE_Init+0x40>
	   {
		   LL_RCC_ForceBackupDomainReset();
 8001116:	f7ff fbcb 	bl	80008b0 <LL_RCC_ForceBackupDomainReset>
		   LL_RCC_ReleaseBackupDomainReset();
 800111a:	f7ff fbdb 	bl	80008d4 <LL_RCC_ReleaseBackupDomainReset>
		   LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 800111e:	2000      	movs	r0, #0
 8001120:	f7ff faac 	bl	800067c <LL_RCC_LSE_SetDriveCapability>
		   LL_RCC_LSE_Enable();
 8001124:	f7ff fa98 	bl	8000658 <LL_RCC_LSE_Enable>
		   while (LL_RCC_LSE_IsReady() != 1)
 8001128:	bf00      	nop
 800112a:	f7ff fabd 	bl	80006a8 <LL_RCC_LSE_IsReady>
 800112e:	4603      	mov	r3, r0
 8001130:	2b01      	cmp	r3, #1
 8001132:	d1fa      	bne.n	800112a <LSE_Init+0x2e>
		   {

		   }
		   LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
 8001134:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001138:	f7ff fba4 	bl	8000884 <LL_RCC_SetRTCClockSource>
	   }
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <SysTick_Handler>:

void SysTick_Handler(void)
//Interruption de systick (50Hz)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  compteur_systick++;
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <SysTick_Handler+0x58>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	4a13      	ldr	r2, [pc, #76]	; (8001198 <SysTick_Handler+0x58>)
 800114c:	6013      	str	r3, [r2, #0]
  if (compteur_systick==200) //clignotement de la LED tte les 2s
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <SysTick_Handler+0x58>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2bc8      	cmp	r3, #200	; 0xc8
 8001154:	d105      	bne.n	8001162 <SysTick_Handler+0x22>
  {
	  LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_5);
 8001156:	2120      	movs	r1, #32
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	f7ff fdeb 	bl	8000d36 <LL_GPIO_TogglePin>
 8001160:	e012      	b.n	8001188 <SysTick_Handler+0x48>
  }
  else if (compteur_systick==(200+expe*50)) //Durée d'impulsion dépendant de expe
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <SysTick_Handler+0x5c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2232      	movs	r2, #50	; 0x32
 8001168:	fb02 f303 	mul.w	r3, r2, r3
 800116c:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <SysTick_Handler+0x58>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d107      	bne.n	8001188 <SysTick_Handler+0x48>
  {
	  LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_5);
 8001178:	2120      	movs	r1, #32
 800117a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117e:	f7ff fdda 	bl	8000d36 <LL_GPIO_TogglePin>
	  compteur_systick=0;
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <SysTick_Handler+0x58>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
  }
  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_10); //Génération signal carré sur PC10
 8001188:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <SysTick_Handler+0x60>)
 800118e:	f7ff fdd2 	bl	8000d36 <LL_GPIO_TogglePin>
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000024 	.word	0x20000024
 800119c:	20000000 	.word	0x20000000
 80011a0:	48000800 	.word	0x48000800

080011a4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
//Interruption bouton blue mode
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 80011a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011ac:	f7ff fc6e 	bl	8000a8c <LL_EXTI_IsActiveFlag_0_31>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00c      	beq.n	80011d0 <EXTI15_10_IRQHandler+0x2c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 80011b6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011ba:	f7ff fc7d 	bl	8000ab8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */
    mode=BLUE_MODE; //Passage en blue mode + gestion passage en calibration ON
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <EXTI15_10_IRQHandler+0x30>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	601a      	str	r2, [r3, #0]
    if (blue_mode_action==BLUE_MODE_ACTIVATE_CALIBRATION)
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <EXTI15_10_IRQHandler+0x34>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d101      	bne.n	80011d0 <EXTI15_10_IRQHandler+0x2c>
    {
    	PLL_Activate();
 80011cc:	f000 f806 	bl	80011dc <PLL_Activate>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000028 	.word	0x20000028
 80011d8:	2000002c 	.word	0x2000002c

080011dc <PLL_Activate>:

void PLL_Activate(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	LL_RCC_MSI_EnablePLLMode();
 80011e0:	f7ff fa98 	bl	8000714 <LL_RCC_MSI_EnablePLLMode>
	while(LL_RCC_MSI_IsReady() != 1)
 80011e4:	bf00      	nop
 80011e6:	f7ff fa83 	bl	80006f0 <LL_RCC_MSI_IsReady>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d1fa      	bne.n	80011e6 <PLL_Activate+0xa>
   {

	}
	LL_RCC_MSI_SetCalibTrimming(0);
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff fad3 	bl	800079c <LL_RCC_MSI_SetCalibTrimming>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 80011f6:	2000      	movs	r0, #0
 80011f8:	f7ff fae6 	bl	80007c8 <LL_RCC_SetSysClkSource>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <PLL_Disable>:

void PLL_Disable(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	LL_RCC_MSI_DisablePLLMode();
 8001204:	f7ff fa96 	bl	8000734 <LL_RCC_MSI_DisablePLLMode>
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <RTC_wakeup_init>:
// partie commune a toutes les utilisations du wakeup timer
static void RTC_wakeup_init( int delay )
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
LL_RTC_DisableWriteProtection( RTC );
 8001214:	4812      	ldr	r0, [pc, #72]	; (8001260 <RTC_wakeup_init+0x54>)
 8001216:	f7ff fcd4 	bl	8000bc2 <LL_RTC_DisableWriteProtection>
LL_RTC_WAKEUP_Disable( RTC );
 800121a:	4811      	ldr	r0, [pc, #68]	; (8001260 <RTC_wakeup_init+0x54>)
 800121c:	f7ff fcf1 	bl	8000c02 <LL_RTC_WAKEUP_Disable>
while	( !LL_RTC_IsActiveFlag_WUTW( RTC ) )
 8001220:	bf00      	nop
 8001222:	480f      	ldr	r0, [pc, #60]	; (8001260 <RTC_wakeup_init+0x54>)
 8001224:	f7ff fd64 	bl	8000cf0 <LL_RTC_IsActiveFlag_WUTW>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f9      	beq.n	8001222 <RTC_wakeup_init+0x16>
	{ }
// connecter le timer a l'horloge 1Hz de la RTC
LL_RTC_WAKEUP_SetClock( RTC, LL_RTC_WAKEUPCLOCK_CKSPRE );
 800122e:	2104      	movs	r1, #4
 8001230:	480b      	ldr	r0, [pc, #44]	; (8001260 <RTC_wakeup_init+0x54>)
 8001232:	f7ff fcf6 	bl	8000c22 <LL_RTC_WAKEUP_SetClock>
// fixer la duree de temporisation
LL_RTC_WAKEUP_SetAutoReload( RTC, delay );	// 16 bits
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4619      	mov	r1, r3
 800123a:	4809      	ldr	r0, [pc, #36]	; (8001260 <RTC_wakeup_init+0x54>)
 800123c:	f7ff fd04 	bl	8000c48 <LL_RTC_WAKEUP_SetAutoReload>
LL_RTC_ClearFlag_WUT(RTC);
 8001240:	4807      	ldr	r0, [pc, #28]	; (8001260 <RTC_wakeup_init+0x54>)
 8001242:	f7ff fd44 	bl	8000cce <LL_RTC_ClearFlag_WUT>
LL_RTC_EnableIT_WUT(RTC);
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <RTC_wakeup_init+0x54>)
 8001248:	f7ff fd65 	bl	8000d16 <LL_RTC_EnableIT_WUT>
LL_RTC_WAKEUP_Enable(RTC);
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <RTC_wakeup_init+0x54>)
 800124e:	f7ff fcc8 	bl	8000be2 <LL_RTC_WAKEUP_Enable>
LL_RTC_EnableWriteProtection(RTC);
 8001252:	4803      	ldr	r0, [pc, #12]	; (8001260 <RTC_wakeup_init+0x54>)
 8001254:	f7ff fca8 	bl	8000ba8 <LL_RTC_EnableWriteProtection>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40002800 	.word	0x40002800

08001264 <RTC_wakeup_init_from_standby_or_shutdown>:

// Dans le cas des modes STANDBY et SHUTDOWN, le MPU sera reveille par reset
// causé par 1 wakeup line (interne ou externe) (le NVIC n'est plus alimenté)
void RTC_wakeup_init_from_standby_or_shutdown( int delay )
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
RTC_wakeup_init( delay );
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ffcd 	bl	800120c <RTC_wakeup_init>
// enable the Internal Wake-up line
LL_PWR_EnableInternWU();	// ceci ne concerne que Standby et Shutdown, pas STOPx
 8001272:	f7ff fc89 	bl	8000b88 <LL_PWR_EnableInternWU>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <RTC_wakeup_init_from_stop>:
// Dans le cas des modes STOPx, le MPU sera reveille par interruption
// le module EXTI et une partie du NVIC sont encore alimentes
// le contenu de la RAM et des registres étant préservé, le MPU
// reprend l'execution après l'instruction WFI
void RTC_wakeup_init_from_stop( int delay )
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
RTC_wakeup_init( delay );
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ffc0 	bl	800120c <RTC_wakeup_init>
// valider l'interrupt par la ligne 20 du module EXTI, qui est réservée au wakeup timer
LL_EXTI_EnableIT_0_31( LL_EXTI_LINE_20 );
 800128c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001290:	f7ff fbd8 	bl	8000a44 <LL_EXTI_EnableIT_0_31>
LL_EXTI_EnableRisingTrig_0_31( LL_EXTI_LINE_20 );
 8001294:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001298:	f7ff fbe6 	bl	8000a68 <LL_EXTI_EnableRisingTrig_0_31>
// valider l'interrupt chez NVIC
NVIC_SetPriority( RTC_WKUP_IRQn, 1 );
 800129c:	2101      	movs	r1, #1
 800129e:	2003      	movs	r0, #3
 80012a0:	f7ff f9b0 	bl	8000604 <__NVIC_SetPriority>
NVIC_EnableIRQ( RTC_WKUP_IRQn );
 80012a4:	2003      	movs	r0, #3
 80012a6:	f7ff f98f 	bl	80005c8 <__NVIC_EnableIRQ>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <RTC_WKUP_IRQHandler>:

// wakeup timer interrupt Handler (inutile mais doit etre defini)
void RTC_WKUP_IRQHandler()
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	af00      	add	r7, sp, #0
LL_EXTI_ClearFlag_0_31( LL_EXTI_LINE_20 );
 80012b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80012ba:	f7ff fbfd 	bl	8000ab8 <LL_EXTI_ClearFlag_0_31>
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <LL_RCC_EnableRTC>:
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <LL_RCC_EnableRTC+0x20>)
 80012ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ce:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <LL_RCC_EnableRTC+0x20>)
 80012d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000

080012e8 <MX_RTC_Init>:

/* USER CODE END 0 */

/* RTC init function */
void MX_RTC_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
	  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]

	  /* Peripheral clock enable */
	  LL_RCC_EnableRTC();
 80012f8:	f7ff ffe4 	bl	80012c4 <LL_RCC_EnableRTC>
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
	  RTC_InitStruct.AsynchPrescaler = 127;
 8001300:	237f      	movs	r3, #127	; 0x7f
 8001302:	60bb      	str	r3, [r7, #8]
	  RTC_InitStruct.SynchPrescaler = 255;
 8001304:	23ff      	movs	r3, #255	; 0xff
 8001306:	60fb      	str	r3, [r7, #12]
	  LL_RTC_Init(RTC, &RTC_InitStruct);
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4619      	mov	r1, r3
 800130c:	4803      	ldr	r0, [pc, #12]	; (800131c <MX_RTC_Init+0x34>)
 800130e:	f000 fdc3 	bl	8001e98 <LL_RTC_Init>
	  //LL_RTC_WAKEUP_Enable(RTC);
	  /** Initialize RTC and set the Time and Date
	  */
}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40002800 	.word	0x40002800

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <MemManage_Handler+0x4>

0800133a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <UsageFault_Handler+0x4>

08001346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <SystemInit+0x64>)
 8001376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137a:	4a16      	ldr	r2, [pc, #88]	; (80013d4 <SystemInit+0x64>)
 800137c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <SystemInit+0x68>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <SystemInit+0x68>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <SystemInit+0x68>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <SystemInit+0x68>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <SystemInit+0x68>)
 800139c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80013a0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80013a4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <SystemInit+0x68>)
 80013a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013ac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <SystemInit+0x68>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <SystemInit+0x68>)
 80013b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <SystemInit+0x68>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <SystemInit+0x64>)
 80013c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013c6:	609a      	str	r2, [r3, #8]
#endif
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00
 80013d8:	40021000 	.word	0x40021000

080013dc <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	2302      	movs	r3, #2
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	2302      	movs	r3, #2
 80013f8:	603b      	str	r3, [r7, #0]

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 80013fa:	4b4f      	ldr	r3, [pc, #316]	; (8001538 <SystemCoreClockUpdate+0x15c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b00      	cmp	r3, #0
 8001404:	d107      	bne.n	8001416 <SystemCoreClockUpdate+0x3a>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001406:	4b4c      	ldr	r3, [pc, #304]	; (8001538 <SystemCoreClockUpdate+0x15c>)
 8001408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	e005      	b.n	8001422 <SystemCoreClockUpdate+0x46>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001416:	4b48      	ldr	r3, [pc, #288]	; (8001538 <SystemCoreClockUpdate+0x15c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	091b      	lsrs	r3, r3, #4
 800141c:	f003 030f 	and.w	r3, r3, #15
 8001420:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001422:	4a46      	ldr	r2, [pc, #280]	; (800153c <SystemCoreClockUpdate+0x160>)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800142c:	4b42      	ldr	r3, [pc, #264]	; (8001538 <SystemCoreClockUpdate+0x15c>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 030c 	and.w	r3, r3, #12
 8001434:	2b0c      	cmp	r3, #12
 8001436:	d865      	bhi.n	8001504 <SystemCoreClockUpdate+0x128>
 8001438:	a201      	add	r2, pc, #4	; (adr r2, 8001440 <SystemCoreClockUpdate+0x64>)
 800143a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143e:	bf00      	nop
 8001440:	08001475 	.word	0x08001475
 8001444:	08001505 	.word	0x08001505
 8001448:	08001505 	.word	0x08001505
 800144c:	08001505 	.word	0x08001505
 8001450:	0800147d 	.word	0x0800147d
 8001454:	08001505 	.word	0x08001505
 8001458:	08001505 	.word	0x08001505
 800145c:	08001505 	.word	0x08001505
 8001460:	08001485 	.word	0x08001485
 8001464:	08001505 	.word	0x08001505
 8001468:	08001505 	.word	0x08001505
 800146c:	08001505 	.word	0x08001505
 8001470:	0800148d 	.word	0x0800148d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001474:	4a32      	ldr	r2, [pc, #200]	; (8001540 <SystemCoreClockUpdate+0x164>)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	6013      	str	r3, [r2, #0]
      break;
 800147a:	e047      	b.n	800150c <SystemCoreClockUpdate+0x130>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800147c:	4b30      	ldr	r3, [pc, #192]	; (8001540 <SystemCoreClockUpdate+0x164>)
 800147e:	4a31      	ldr	r2, [pc, #196]	; (8001544 <SystemCoreClockUpdate+0x168>)
 8001480:	601a      	str	r2, [r3, #0]
      break;
 8001482:	e043      	b.n	800150c <SystemCoreClockUpdate+0x130>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001484:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <SystemCoreClockUpdate+0x164>)
 8001486:	4a30      	ldr	r2, [pc, #192]	; (8001548 <SystemCoreClockUpdate+0x16c>)
 8001488:	601a      	str	r2, [r3, #0]
      break;
 800148a:	e03f      	b.n	800150c <SystemCoreClockUpdate+0x130>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800148c:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <SystemCoreClockUpdate+0x15c>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	607b      	str	r3, [r7, #4]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001496:	4b28      	ldr	r3, [pc, #160]	; (8001538 <SystemCoreClockUpdate+0x15c>)
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	091b      	lsrs	r3, r3, #4
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	3301      	adds	r3, #1
 80014a2:	603b      	str	r3, [r7, #0]

      switch (pllsource)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d002      	beq.n	80014b0 <SystemCoreClockUpdate+0xd4>
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d006      	beq.n	80014bc <SystemCoreClockUpdate+0xe0>
 80014ae:	e00b      	b.n	80014c8 <SystemCoreClockUpdate+0xec>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80014b0:	4a24      	ldr	r2, [pc, #144]	; (8001544 <SystemCoreClockUpdate+0x168>)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b8:	613b      	str	r3, [r7, #16]
          break;
 80014ba:	e00b      	b.n	80014d4 <SystemCoreClockUpdate+0xf8>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80014bc:	4a22      	ldr	r2, [pc, #136]	; (8001548 <SystemCoreClockUpdate+0x16c>)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c4:	613b      	str	r3, [r7, #16]
          break;
 80014c6:	e005      	b.n	80014d4 <SystemCoreClockUpdate+0xf8>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d0:	613b      	str	r3, [r7, #16]
          break;
 80014d2:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <SystemCoreClockUpdate+0x15c>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <SystemCoreClockUpdate+0x15c>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	0e5b      	lsrs	r3, r3, #25
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	3301      	adds	r3, #1
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
      SystemCoreClock = pllvco/pllr;
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fe:	4a10      	ldr	r2, [pc, #64]	; (8001540 <SystemCoreClockUpdate+0x164>)
 8001500:	6013      	str	r3, [r2, #0]
      break;
 8001502:	e003      	b.n	800150c <SystemCoreClockUpdate+0x130>

    default:
      SystemCoreClock = msirange;
 8001504:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <SystemCoreClockUpdate+0x164>)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	6013      	str	r3, [r2, #0]
      break;
 800150a:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <SystemCoreClockUpdate+0x15c>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	4a0d      	ldr	r2, [pc, #52]	; (800154c <SystemCoreClockUpdate+0x170>)
 8001518:	5cd3      	ldrb	r3, [r2, r3]
 800151a:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <SystemCoreClockUpdate+0x164>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	fa22 f303 	lsr.w	r3, r2, r3
 8001526:	4a06      	ldr	r2, [pc, #24]	; (8001540 <SystemCoreClockUpdate+0x164>)
 8001528:	6013      	str	r3, [r2, #0]
}
 800152a:	bf00      	nop
 800152c:	371c      	adds	r7, #28
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000
 800153c:	0800203c 	.word	0x0800203c
 8001540:	20000004 	.word	0x20000004
 8001544:	00f42400 	.word	0x00f42400
 8001548:	007a1200 	.word	0x007a1200
 800154c:	0800202c 	.word	0x0800202c

08001550 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001588 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001554:	f7ff ff0c 	bl	8001370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001558:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800155a:	e003      	b.n	8001564 <LoopCopyDataInit>

0800155c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800155e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001560:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001562:	3104      	adds	r1, #4

08001564 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001564:	480a      	ldr	r0, [pc, #40]	; (8001590 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001568:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800156a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800156c:	d3f6      	bcc.n	800155c <CopyDataInit>
	ldr	r2, =_sbss
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001570:	e002      	b.n	8001578 <LoopFillZerobss>

08001572 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001572:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001574:	f842 3b04 	str.w	r3, [r2], #4

08001578 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <LoopForever+0x16>)
	cmp	r2, r3
 800157a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800157c:	d3f9      	bcc.n	8001572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800157e:	f000 fd25 	bl	8001fcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001582:	f7ff fbf1 	bl	8000d68 <main>

08001586 <LoopForever>:

LoopForever:
    b LoopForever
 8001586:	e7fe      	b.n	8001586 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001588:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800158c:	08002074 	.word	0x08002074
	ldr	r0, =_sdata
 8001590:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001594:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8001598:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 800159c:	20000030 	.word	0x20000030

080015a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015a0:	e7fe      	b.n	80015a0 <ADC1_2_IRQHandler>
	...

080015a4 <LL_EXTI_EnableIT_0_31>:
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <LL_EXTI_EnableIT_0_31+0x20>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4904      	ldr	r1, [pc, #16]	; (80015c4 <LL_EXTI_EnableIT_0_31+0x20>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	600b      	str	r3, [r1, #0]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	40010400 	.word	0x40010400

080015c8 <LL_EXTI_EnableIT_32_63>:
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <LL_EXTI_EnableIT_32_63+0x20>)
 80015d2:	6a1a      	ldr	r2, [r3, #32]
 80015d4:	4904      	ldr	r1, [pc, #16]	; (80015e8 <LL_EXTI_EnableIT_32_63+0x20>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4313      	orrs	r3, r2
 80015da:	620b      	str	r3, [r1, #32]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	40010400 	.word	0x40010400

080015ec <LL_EXTI_DisableIT_0_31>:
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <LL_EXTI_DisableIT_0_31+0x24>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	4904      	ldr	r1, [pc, #16]	; (8001610 <LL_EXTI_DisableIT_0_31+0x24>)
 80015fe:	4013      	ands	r3, r2
 8001600:	600b      	str	r3, [r1, #0]
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40010400 	.word	0x40010400

08001614 <LL_EXTI_DisableIT_32_63>:
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <LL_EXTI_DisableIT_32_63+0x24>)
 800161e:	6a1a      	ldr	r2, [r3, #32]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	43db      	mvns	r3, r3
 8001624:	4904      	ldr	r1, [pc, #16]	; (8001638 <LL_EXTI_DisableIT_32_63+0x24>)
 8001626:	4013      	ands	r3, r2
 8001628:	620b      	str	r3, [r1, #32]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40010400 	.word	0x40010400

0800163c <LL_EXTI_EnableEvent_0_31>:
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <LL_EXTI_EnableEvent_0_31+0x20>)
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	4904      	ldr	r1, [pc, #16]	; (800165c <LL_EXTI_EnableEvent_0_31+0x20>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	40010400 	.word	0x40010400

08001660 <LL_EXTI_EnableEvent_32_63>:
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <LL_EXTI_EnableEvent_32_63+0x20>)
 800166a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800166c:	4904      	ldr	r1, [pc, #16]	; (8001680 <LL_EXTI_EnableEvent_32_63+0x20>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4313      	orrs	r3, r2
 8001672:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	40010400 	.word	0x40010400

08001684 <LL_EXTI_DisableEvent_0_31>:
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <LL_EXTI_DisableEvent_0_31+0x24>)
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	43db      	mvns	r3, r3
 8001694:	4904      	ldr	r1, [pc, #16]	; (80016a8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001696:	4013      	ands	r3, r2
 8001698:	604b      	str	r3, [r1, #4]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40010400 	.word	0x40010400

080016ac <LL_EXTI_DisableEvent_32_63>:
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <LL_EXTI_DisableEvent_32_63+0x24>)
 80016b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	43db      	mvns	r3, r3
 80016bc:	4904      	ldr	r1, [pc, #16]	; (80016d0 <LL_EXTI_DisableEvent_32_63+0x24>)
 80016be:	4013      	ands	r3, r2
 80016c0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40010400 	.word	0x40010400

080016d4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	4904      	ldr	r1, [pc, #16]	; (80016f4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	608b      	str	r3, [r1, #8]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40010400 	.word	0x40010400

080016f8 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001702:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001704:	4904      	ldr	r1, [pc, #16]	; (8001718 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4313      	orrs	r3, r2
 800170a:	628b      	str	r3, [r1, #40]	; 0x28
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40010400 	.word	0x40010400

0800171c <LL_EXTI_DisableRisingTrig_0_31>:
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	43db      	mvns	r3, r3
 800172c:	4904      	ldr	r1, [pc, #16]	; (8001740 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800172e:	4013      	ands	r3, r2
 8001730:	608b      	str	r3, [r1, #8]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40010400 	.word	0x40010400

08001744 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800174e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	43db      	mvns	r3, r3
 8001754:	4904      	ldr	r1, [pc, #16]	; (8001768 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001756:	4013      	ands	r3, r2
 8001758:	628b      	str	r3, [r1, #40]	; 0x28
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40010400 	.word	0x40010400

0800176c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	4904      	ldr	r1, [pc, #16]	; (800178c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4313      	orrs	r3, r2
 800177e:	60cb      	str	r3, [r1, #12]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40010400 	.word	0x40010400

08001790 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800179a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800179c:	4904      	ldr	r1, [pc, #16]	; (80017b0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	40010400 	.word	0x40010400

080017b4 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	43db      	mvns	r3, r3
 80017c4:	4904      	ldr	r1, [pc, #16]	; (80017d8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	60cb      	str	r3, [r1, #12]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40010400 	.word	0x40010400

080017dc <LL_EXTI_DisableFallingTrig_32_63>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80017e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	4904      	ldr	r1, [pc, #16]	; (8001800 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40010400 	.word	0x40010400

08001804 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	7a1b      	ldrb	r3, [r3, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 80c6 	beq.w	80019a6 <LL_EXTI_Init+0x1a2>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d05d      	beq.n	80018de <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	7a5b      	ldrb	r3, [r3, #9]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d00e      	beq.n	8001848 <LL_EXTI_Init+0x44>
 800182a:	2b02      	cmp	r3, #2
 800182c:	d017      	beq.n	800185e <LL_EXTI_Init+0x5a>
 800182e:	2b00      	cmp	r3, #0
 8001830:	d120      	bne.n	8001874 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ff24 	bl	8001684 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff feaf 	bl	80015a4 <LL_EXTI_EnableIT_0_31>
          break;
 8001846:	e018      	b.n	800187a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fecd 	bl	80015ec <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fef0 	bl	800163c <LL_EXTI_EnableEvent_0_31>
          break;
 800185c:	e00d      	b.n	800187a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fe9e 	bl	80015a4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fee5 	bl	800163c <LL_EXTI_EnableEvent_0_31>
          break;
 8001872:	e002      	b.n	800187a <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8001874:	2301      	movs	r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
          break;
 8001878:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	7a9b      	ldrb	r3, [r3, #10]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d02d      	beq.n	80018de <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	7a9b      	ldrb	r3, [r3, #10]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d00e      	beq.n	80018a8 <LL_EXTI_Init+0xa4>
 800188a:	2b03      	cmp	r3, #3
 800188c:	d017      	beq.n	80018be <LL_EXTI_Init+0xba>
 800188e:	2b01      	cmp	r3, #1
 8001890:	d120      	bne.n	80018d4 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ff8c 	bl	80017b4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff17 	bl	80016d4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80018a6:	e01b      	b.n	80018e0 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff35 	bl	800171c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff58 	bl	800176c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80018bc:	e010      	b.n	80018e0 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ff06 	bl	80016d4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff4d 	bl	800176c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80018d2:	e005      	b.n	80018e0 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	60fb      	str	r3, [r7, #12]
            break;
 80018dc:	e000      	b.n	80018e0 <LL_EXTI_Init+0xdc>
        }
      }
 80018de:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d073      	beq.n	80019d0 <LL_EXTI_Init+0x1cc>
    {
      switch (EXTI_InitStruct->Mode)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7a5b      	ldrb	r3, [r3, #9]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d00e      	beq.n	800190e <LL_EXTI_Init+0x10a>
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d017      	beq.n	8001924 <LL_EXTI_Init+0x120>
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d120      	bne.n	800193a <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fed5 	bl	80016ac <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fe5e 	bl	80015c8 <LL_EXTI_EnableIT_32_63>
          break;
 800190c:	e01a      	b.n	8001944 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fe7e 	bl	8001614 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fe9f 	bl	8001660 <LL_EXTI_EnableEvent_32_63>
          break;
 8001922:	e00f      	b.n	8001944 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fe4d 	bl	80015c8 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fe94 	bl	8001660 <LL_EXTI_EnableEvent_32_63>
          break;
 8001938:	e004      	b.n	8001944 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	60fb      	str	r3, [r7, #12]
          break;
 8001942:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7a9b      	ldrb	r3, [r3, #10]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d041      	beq.n	80019d0 <LL_EXTI_Init+0x1cc>
      {
        switch (EXTI_InitStruct->Trigger)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	7a9b      	ldrb	r3, [r3, #10]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d00e      	beq.n	8001972 <LL_EXTI_Init+0x16e>
 8001954:	2b03      	cmp	r3, #3
 8001956:	d017      	beq.n	8001988 <LL_EXTI_Init+0x184>
 8001958:	2b01      	cmp	r3, #1
 800195a:	d120      	bne.n	800199e <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff3b 	bl	80017dc <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fec4 	bl	80016f8 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001970:	e02f      	b.n	80019d2 <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fee4 	bl	8001744 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff05 	bl	8001790 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001986:	e024      	b.n	80019d2 <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff feb3 	bl	80016f8 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fefa 	bl	8001790 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800199c:	e019      	b.n	80019d2 <LL_EXTI_Init+0x1ce>
          default:
            status = ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	60fb      	str	r3, [r7, #12]
            break;
 80019a2:	bf00      	nop
 80019a4:	e015      	b.n	80019d2 <LL_EXTI_Init+0x1ce>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fe1e 	bl	80015ec <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fe65 	bl	8001684 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fe28 	bl	8001614 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fe6f 	bl	80016ac <LL_EXTI_DisableEvent_32_63>
 80019ce:	e000      	b.n	80019d2 <LL_EXTI_Init+0x1ce>
      }
 80019d0:	bf00      	nop
  }

  return status;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <LL_GPIO_SetPinMode>:
{
 80019dc:	b480      	push	{r7}
 80019de:	b08b      	sub	sp, #44	; 0x2c
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	613b      	str	r3, [r7, #16]
  return result;
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001a02:	2320      	movs	r3, #32
 8001a04:	e003      	b.n	8001a0e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	fab3 f383 	clz	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2103      	movs	r1, #3
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	401a      	ands	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	fa93 f3a3 	rbit	r3, r3
 8001a24:	61fb      	str	r3, [r7, #28]
  return result;
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001a30:	2320      	movs	r3, #32
 8001a32:	e003      	b.n	8001a3c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	fab3 f383 	clz	r3, r3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	431a      	orrs	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	601a      	str	r2, [r3, #0]
}
 8001a4a:	bf00      	nop
 8001a4c:	372c      	adds	r7, #44	; 0x2c
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <LL_GPIO_SetPinOutputType>:
{
 8001a56:	b480      	push	{r7}
 8001a58:	b085      	sub	sp, #20
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	60f8      	str	r0, [r7, #12]
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	fb01 f303 	mul.w	r3, r1, r3
 8001a74:	431a      	orrs	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	605a      	str	r2, [r3, #4]
}
 8001a7a:	bf00      	nop
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <LL_GPIO_SetPinSpeed>:
{
 8001a86:	b480      	push	{r7}
 8001a88:	b08b      	sub	sp, #44	; 0x2c
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	fa93 f3a3 	rbit	r3, r3
 8001aa0:	613b      	str	r3, [r7, #16]
  return result;
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001aac:	2320      	movs	r3, #32
 8001aae:	e003      	b.n	8001ab8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2103      	movs	r1, #3
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	fa93 f3a3 	rbit	r3, r3
 8001ace:	61fb      	str	r3, [r7, #28]
  return result;
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001ada:	2320      	movs	r3, #32
 8001adc:	e003      	b.n	8001ae6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	fab3 f383 	clz	r3, r3
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	fa01 f303 	lsl.w	r3, r1, r3
 8001aee:	431a      	orrs	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	609a      	str	r2, [r3, #8]
}
 8001af4:	bf00      	nop
 8001af6:	372c      	adds	r7, #44	; 0x2c
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_GPIO_SetPinPull>:
{
 8001b00:	b480      	push	{r7}
 8001b02:	b08b      	sub	sp, #44	; 0x2c
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa93 f3a3 	rbit	r3, r3
 8001b1a:	613b      	str	r3, [r7, #16]
  return result;
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001b26:	2320      	movs	r3, #32
 8001b28:	e003      	b.n	8001b32 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	fab3 f383 	clz	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	2103      	movs	r1, #3
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	401a      	ands	r2, r3
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	61fb      	str	r3, [r7, #28]
  return result;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001b54:	2320      	movs	r3, #32
 8001b56:	e003      	b.n	8001b60 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	fab3 f383 	clz	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	fa01 f303 	lsl.w	r3, r1, r3
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	60da      	str	r2, [r3, #12]
}
 8001b6e:	bf00      	nop
 8001b70:	372c      	adds	r7, #44	; 0x2c
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <LL_GPIO_SetAFPin_0_7>:
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b08b      	sub	sp, #44	; 0x2c
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a1a      	ldr	r2, [r3, #32]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	fa93 f3a3 	rbit	r3, r3
 8001b94:	613b      	str	r3, [r7, #16]
  return result;
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001ba0:	2320      	movs	r3, #32
 8001ba2:	e003      	b.n	8001bac <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	fab3 f383 	clz	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	210f      	movs	r1, #15
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	61fb      	str	r3, [r7, #28]
  return result;
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001bce:	2320      	movs	r3, #32
 8001bd0:	e003      	b.n	8001bda <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	fa01 f303 	lsl.w	r3, r1, r3
 8001be2:	431a      	orrs	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	621a      	str	r2, [r3, #32]
}
 8001be8:	bf00      	nop
 8001bea:	372c      	adds	r7, #44	; 0x2c
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_GPIO_SetAFPin_8_15>:
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b08b      	sub	sp, #44	; 0x2c
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	0a1b      	lsrs	r3, r3, #8
 8001c08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	fa93 f3a3 	rbit	r3, r3
 8001c10:	613b      	str	r3, [r7, #16]
  return result;
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8001c1c:	2320      	movs	r3, #32
 8001c1e:	e003      	b.n	8001c28 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	fab3 f383 	clz	r3, r3
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	210f      	movs	r1, #15
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	401a      	ands	r2, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	0a1b      	lsrs	r3, r3, #8
 8001c38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	fa93 f3a3 	rbit	r3, r3
 8001c40:	61fb      	str	r3, [r7, #28]
  return result;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8001c4c:	2320      	movs	r3, #32
 8001c4e:	e003      	b.n	8001c58 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	fab3 f383 	clz	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	431a      	orrs	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c66:	bf00      	nop
 8001c68:	372c      	adds	r7, #44	; 0x2c
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b088      	sub	sp, #32
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	fa93 f3a3 	rbit	r3, r3
 8001c88:	60fb      	str	r3, [r7, #12]
  return result;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <LL_GPIO_Init+0x26>
    return 32U;
 8001c94:	2320      	movs	r3, #32
 8001c96:	e003      	b.n	8001ca0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fab3 f383 	clz	r3, r3
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001ca2:	e040      	b.n	8001d26 <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d032      	beq.n	8001d20 <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	69b9      	ldr	r1, [r7, #24]
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff fe8a 	bl	80019dc <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d003      	beq.n	8001cd8 <LL_GPIO_Init+0x66>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d106      	bne.n	8001ce6 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	69b9      	ldr	r1, [r7, #24]
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff fed0 	bl	8001a86 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	461a      	mov	r2, r3
 8001cec:	69b9      	ldr	r1, [r7, #24]
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ff06 	bl	8001b00 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d111      	bne.n	8001d20 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	2bff      	cmp	r3, #255	; 0xff
 8001d00:	d807      	bhi.n	8001d12 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	461a      	mov	r2, r3
 8001d08:	69b9      	ldr	r1, [r7, #24]
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ff35 	bl	8001b7a <LL_GPIO_SetAFPin_0_7>
 8001d10:	e006      	b.n	8001d20 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	461a      	mov	r2, r3
 8001d18:	69b9      	ldr	r1, [r7, #24]
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ff6a 	bl	8001bf4 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	3301      	adds	r3, #1
 8001d24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1b7      	bne.n	8001ca4 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d003      	beq.n	8001d44 <LL_GPIO_Init+0xd2>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d107      	bne.n	8001d54 <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	6819      	ldr	r1, [r3, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff fe81 	bl	8001a56 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3720      	adds	r7, #32
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <LL_RTC_SetHourFormat>:
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	609a      	str	r2, [r3, #8]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_RTC_EnableInitMode>:
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, RTC_LL_INIT_MASK);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d92:	60da      	str	r2, [r3, #12]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_RTC_DisableInitMode>:
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dae:	60da      	str	r2, [r3, #12]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_RTC_SetAsynchPrescaler>:
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	041b      	lsls	r3, r3, #16
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	611a      	str	r2, [r3, #16]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_RTC_SetSynchPrescaler>:
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001df6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	611a      	str	r2, [r3, #16]
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <LL_RTC_EnableWriteProtection>:
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	22ff      	movs	r2, #255	; 0xff
 8001e1a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <LL_RTC_DisableWriteProtection>:
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	22ca      	movs	r2, #202	; 0xca
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2253      	movs	r2, #83	; 0x53
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_RTC_IsActiveFlag_INIT>:
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e58:	2b40      	cmp	r3, #64	; 0x40
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2301      	moveq	r3, #1
 8001e5e:	2300      	movne	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <LL_SYSTICK_IsActiveCounterFlag>:
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e80:	bf0c      	ite	eq
 8001e82:	2301      	moveq	r3, #1
 8001e84:	2300      	movne	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000e010 	.word	0xe000e010

08001e98 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffbe 	bl	8001e28 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f822 	bl	8001ef6 <LL_RTC_EnterInitMode>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d016      	beq.n	8001ee6 <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ff4d 	bl	8001d5e <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff ff8a 	bl	8001de4 <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff ff70 	bl	8001dbc <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ff5f 	bl	8001da0 <LL_RTC_DisableInitMode>

    status = SUCCESS;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ff91 	bl	8001e0e <LL_RTC_EnableWriteProtection>

  return status;
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8001efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f02:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8001f04:	2300      	movs	r3, #0
 8001f06:	75fb      	strb	r3, [r7, #23]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ff9d 	bl	8001e48 <LL_RTC_IsActiveFlag_INIT>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d11e      	bne.n	8001f52 <LL_RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ff35 	bl	8001d84 <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ff94 	bl	8001e48 <LL_RTC_IsActiveFlag_INIT>
 8001f20:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8001f22:	e010      	b.n	8001f46 <LL_RTC_EnterInitMode+0x50>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8001f24:	f7ff ffa4 	bl	8001e70 <LL_SYSTICK_IsActiveCounterFlag>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d102      	bne.n	8001f34 <LL_RTC_EnterInitMode+0x3e>
      {
        timeout --;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ff87 	bl	8001e48 <LL_RTC_IsActiveFlag_INIT>
 8001f3a:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <LL_RTC_EnterInitMode+0x50>
      {
        status = ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <LL_RTC_EnterInitMode+0x5c>
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d1e8      	bne.n	8001f24 <LL_RTC_EnterInitMode+0x2e>
      }
    }
  }
  return status;
 8001f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6e:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <LL_InitTick+0x30>)
 8001f70:	3b01      	subs	r3, #1
 8001f72:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <LL_InitTick+0x30>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <LL_InitTick+0x30>)
 8001f7c:	2205      	movs	r2, #5
 8001f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000e010 	.word	0xe000e010

08001f90 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001f98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ffdd 	bl	8001f5c <LL_InitTick>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <LL_SetSystemCoreClock+0x1c>)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6013      	str	r3, [r2, #0]
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000004 	.word	0x20000004

08001fcc <__libc_init_array>:
 8001fcc:	b570      	push	{r4, r5, r6, lr}
 8001fce:	4e0d      	ldr	r6, [pc, #52]	; (8002004 <__libc_init_array+0x38>)
 8001fd0:	4c0d      	ldr	r4, [pc, #52]	; (8002008 <__libc_init_array+0x3c>)
 8001fd2:	1ba4      	subs	r4, r4, r6
 8001fd4:	10a4      	asrs	r4, r4, #2
 8001fd6:	2500      	movs	r5, #0
 8001fd8:	42a5      	cmp	r5, r4
 8001fda:	d109      	bne.n	8001ff0 <__libc_init_array+0x24>
 8001fdc:	4e0b      	ldr	r6, [pc, #44]	; (800200c <__libc_init_array+0x40>)
 8001fde:	4c0c      	ldr	r4, [pc, #48]	; (8002010 <__libc_init_array+0x44>)
 8001fe0:	f000 f818 	bl	8002014 <_init>
 8001fe4:	1ba4      	subs	r4, r4, r6
 8001fe6:	10a4      	asrs	r4, r4, #2
 8001fe8:	2500      	movs	r5, #0
 8001fea:	42a5      	cmp	r5, r4
 8001fec:	d105      	bne.n	8001ffa <__libc_init_array+0x2e>
 8001fee:	bd70      	pop	{r4, r5, r6, pc}
 8001ff0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ff4:	4798      	blx	r3
 8001ff6:	3501      	adds	r5, #1
 8001ff8:	e7ee      	b.n	8001fd8 <__libc_init_array+0xc>
 8001ffa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ffe:	4798      	blx	r3
 8002000:	3501      	adds	r5, #1
 8002002:	e7f2      	b.n	8001fea <__libc_init_array+0x1e>
 8002004:	0800206c 	.word	0x0800206c
 8002008:	0800206c 	.word	0x0800206c
 800200c:	0800206c 	.word	0x0800206c
 8002010:	08002070 	.word	0x08002070

08002014 <_init>:
 8002014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002016:	bf00      	nop
 8002018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800201a:	bc08      	pop	{r3}
 800201c:	469e      	mov	lr, r3
 800201e:	4770      	bx	lr

08002020 <_fini>:
 8002020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002022:	bf00      	nop
 8002024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002026:	bc08      	pop	{r3}
 8002028:	469e      	mov	lr, r3
 800202a:	4770      	bx	lr
